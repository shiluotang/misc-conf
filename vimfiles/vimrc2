if has('win32')
    if expand('$lang') =~ '.*UTF-8'
    else
        if version < 800
            let $LANG=expand('$lang') . '.UTF-8'
        endif
        set encoding=utf-8
        scriptencoding utf-8
        if version >= 802 && has('iconv')
            set makeencoding=char
        endif
    endif
endif
if filereadable(expand('$VIMRUNTIME/vimrc_example.vim'))
    source $VIMRUNTIME/vimrc_example.vim
endif

if has('gui')
    set guioptions+=a
    set guioptions+=P
    set guioptions+=c
    "set guioptions+=A
    " preserve icon
    "set guioptions-=i
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=b
    set guioptions-=h
endif
if has('diff')
            \ && &diffopt =~ 'internal'
            \ && &diffopt !~ 'algorithm'
    let s:diff_algos = [
                \ 'algorithm:patience',
                \ 'algorithm:histogram'
                \ ]
    for s:diff_algo in s:diff_algos
        try
            execute 'set diffopt+=' . s:diff_algo
    break
    catch
        endtry
    endfor
endif

function! PlugLoaded(name)
    if !exists('g:plugs')
        return 0
    endif
    if has_key(g:plugs, a:name)
        let plugdir = g:plugs[a:name].dir
        let fixed_plugdir = substitute(substitute(plugdir, '\\$', '/', ''), '\/$', '', '')
        return isdirectory(fixed_plugdir) && stridx(&rtp, fixed_plugdir)
    endif
    return 0
endfunction

function s:GuiConfig0()
    if filereadable(expand('$VIMRUNTIME/gvimrc_example.vim'))
        source $VIMRUNTIME/gvimrc_example.vim
        " reset some settings
        colorscheme default
        set cmdheight=1
    endif
    if has('gui_gtk')
        "set guifont=Courier\ 10\ Pitch\ 12
        set guifontwide=AR\ PL\ UKai\ CN\ 10
        "set guifont=Courier\ 10\ Pitch\ for\ Powerline\ 12
        "set guifont=Courier\ Prime\ for\ Powerline\ 12
        "set guifont=CourierPrime\ Nerd\ Font\ Mono\ 10
        "set guifont=Courier\ Prime\ Light\ 11
        set guifont=JetBrainsMono\ NF\ 11
        "set guifont=Courier\ for\ Powerline\ 12
        "set guifont=DroidSansMono\ Nerd\ Font\ Mono\ 12
        "set guifont=Cousine\ Nerd\ Font\ Mono\ 12
        "set guifont=GoMono\ Nerd\ Font\ Mono\ 12
        "set guifont=FuraCode\ Nerd\ Font\ Mono\ Medium\ 12
    elseif has('x11')
        set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
    elseif has('gui_win32')
        set guifontwide=楷体:h10:cGB2312:qDRAFT
        set guifont=Courier_New:h10
        "set guifont=Anonymice_Powerline:h10:cANSI
        "set guifont=Cousine_NF:h10:cANSI
        "set guifont=DroidSansMono_NF:h10:cANSI
        "set guifont=FiraCode_Nerd_Font_Mono:h10:cANSI:qDRAFT
    elseif has('gui_macvim') || has('gui_mac')
        "set guifont=Courier:h12
        set guifontwide=KaiTi:h14
        "set guifont=CousineForPowerline:h12
        "set guifont=CourierPrimeForPowerline:h12
        set guifont=CourierPrimeNerdFontCompleteM-:h14
        "set guifont=CourierForPowerline:h12
        "set guifont=DroidSansMonoNerdFontCompleteM-:h20
        "set guifont=FuraCodeNerdFontCompleteM-Regular:h12
        "set guifont=GoMonoForPowerline:h12
        "set guifont=CodeNewRomanNerdFontCompleteM-:h12
    elseif has('nvim')
        if exists(':GuiFont')
            GuiFont! CourierPrime\ NF:h10
        endif
        " Disable GUI Tabline
        if exists(':GuiTabline')
            GuiTabline 0
        endif
        " Disable GUI Popupmenu
        if exists(':GuiPopupmenu')
            GuiPopupmenu 0
        endif
        " Disable GUI ScrollBar
        if exists(':GuiScrollBar')
            GuiScrollBar 0
        endif
    endif
    set showtabline=1
    if PlugLoaded("vim-one")
        colorscheme one
        set background=light
    endif
    "if PlugLoaded("nord-vim")
    "    colorscheme nord
    "endif
    if PlugLoaded('vim-airline')
        if exists(':AirlineTheme')
            execute "AirlineTheme " . g:colors_name
        endif
        if IsSymbolicFont()
            let g:airline_powerline_fonts = 1
            "fix the stupid update without considering nerd fonts
            if !exists('g:airline_symbols')
                let g:airline_symbols = {}
            endif
            let g:airline_symbols.colnr = ' :'
        else
            let g:airline_symbols_ascii = 1
        endif
    endif
endfunction

function s:GuiConfig()
    if has('nvim') && exists('g:GuiLoaded')
                \ || has('gui_running')
        call s:GuiConfig0()
        call s:LoadPlugins()
        call s:CustomizePlugins()
    endif
endfunction

let g:vim_plug_path_prefix = &rtp[0 : stridx(&rtp, ",") - 1]
let g:vim_plug_path = g:vim_plug_path_prefix . "/autoload/plug.vim"
"let g:plug_home =
let g:plug_threads = 1
let g:plug_retries = 1
let g:plug_timeout = 3
let g:plug_url_format = 'https://github.com/%s.git'

if empty(glob(expand(g:vim_plug_path)))
    if executable('curl')
        execute 'silent !curl -fLo ' . g:vim_plug_path
                    \ . ' --create-dirs '
                    \ . '"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    elseif executable('wget')
        if !isdirectory(expand(g:vim_plug_path_prefix . '/autoload'))
            if has('*mkdir')
                execute mkdir(expand(g:vim_plug_path_prefix . '/autoload'), 'p')
            else
                execute 'silent !mkdir ' . expand(g:vim_plug_path_prefix)
                execute 'silent !mkdir ' . expand(g:vim_plug_path_prefix . '/autoload')
            endif
        endif
        execute 'silent !wget -O ' . expand(g:vim_plug_path)
                    \ . ' --no-check-certificate '
                    \ . '"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    else
        echoerr "curl and wget are all missing!!!"
    endif
endif

function IsPythonEnabled()
    let s:pyver = 0
    if version >= 800
        if s:pyver == 0
            if has('python3_compiled')
                if has('python3')
                    let s:pyver = 3
                endif
            endif
        endif
        if s:pyver == 0
            if has('python_compiled')
                if has('python')
                    let s:pyver = 2
                endif
            endif
        endif
    else
        if has('python3')
            let s:pyver = 3
        elseif has('python')
            let s:pyver = 2
        endif
    endif
    return s:pyver
endfunction

function IsPython3Enabled()
    return IsPythonEnabled() >= 3
endfunction

function IsPowerlineFont()
    return &guifont =~ 'Powerline'
endfunction

function IsNerdFont()
    return &guifont =~ 'NerdFont'
                \ || &guifont =~ 'Nerd Font'
                \ || &guifont =~ '_NF'
                \ || &guifont =~ ' NF '
endfunction

function IsSymbolicFont()
    return IsPowerlineFont() || IsNerdFont()
endfunction

function s:LoadPlugins()
call plug#begin(expand('$HOME/.vim/plugged'))
"scm{{{
Plug 'vim-scripts/vcscommand.vim'
if version >= 800
    Plug 'tpope/vim-fugitive', {'as': 'vim-fugitive'}
elseif version >= 704
    Plug 'tpope/vim-fugitive', {'tag': 'v3.1', 'as': 'vim-fugitive-vim74'}
elseif version >= 703
    Plug 'tpope/vim-fugitive', {'tag': 'v2.2', 'as': 'vim-fugitive-vim73'}
endif
if has('nvim') || has('patch-8.0.902')
    Plug 'mhinz/vim-signify'
elseif version >= 704
    Plug 'mhinz/vim-signify', {'tag': 'legacy', 'as': 'vim-signify-vim74'}
endif
"}}}
"colorschemes {{{
Plug 'vim-scripts/Colour-Sampler-Pack'
"Plug 'flazz/vim-colorschemes'
Plug 'rainglow/vim', {'as': 'rainglow-vim-colorschemes'}
"Plug 'rafi/awesome-vim-colorschemes'
Plug 'joshdick/onedark.vim'
Plug 'dracula/vim', {'as': 'dracula.vim'}
Plug 'chriskempson/base16-vim'
Plug 'equt/paper.vim'
Plug 'rakr/vim-one'
Plug 'ghifarit53/tokyonight-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'junegunn/seoul256.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'ayu-theme/ayu-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'lifepillar/vim-solarized8'
"}}}
"intellisense{{{
Plug 'rust-lang/rust.vim'
if version >= 800
    " coc.nvim, LanguageClient-neovim, vim-lsp
    let g:lsp_vendor = 'coc.nvim'
    if exists('g:lsp_vendor')
        if g:lsp_vendor == 'vim-lsp'
            Plug 'prabirshrestha/vim-lsp'
            Plug 'mattn/vim-lsp-settings'
            let g:deoplete_with_vim_lsp = 1
            if g:deoplete_with_vim_lsp == 1
                Plug 'Shougo/deoplete.nvim'
                Plug 'lighttiger2505/deoplete-vim-lsp'
            else
                Plug 'prabirshrestha/asyncomplete.vim'
                Plug 'prabirshrestha/asyncomplete-lsp.vim'
            endif
        elseif g:lsp_vendor == 'LanguageClient-neovim'
            Plug 'autozimu/LanguageClient-neovim', {
                        \ 'branch': 'next',
                        \ 'do': 'bash install.sh',
                        \ }
        elseif g:lsp_vendor == 'coc.nvim'
            let g:coc_load_on_filetypes = 0
            let g:coc_disable_startup_warning = 1
            if g:coc_load_on_filetypes
                Plug 'neoclide/coc.nvim', {
                            \ 'branch': 'release',
                            \ 'for': [
                            \   'c',
                            \   'cpp',
                            \   'java',
                            \   'cs',
                            \   'python',
                            \   'vim',
                            \   'javascript',
                            \   'json'
                            \   ]
                            \ }
            else
                Plug 'neoclide/coc.nvim', {'branch': 'release'}
            endif
        endif
    else
        if IsPython3Enabled()
            Plug 'davidhalter/jedi-vim', {'for': 'python'}
        endif
        if IsPythonEnabled()
            Plug 'xavierd/clang_complete'
        endif
    endif
    Plug 'OmniSharp/omnisharp-vim', {'for': 'cs'}
else
    if IsPython3Enabled()
        Plug 'artur-shaik/vim-javacomplete2', {'for': 'java'}
    else
        Plug 'vim-scripts/javacomplete', {'for': 'java'}
    endif
    "Plug 'shiluotang/vim-eclim'
    Plug 'leafgarland/typescript-vim'
    Plug 'pangloss/vim-javascript'
    Plug 'myhere/vim-nodejs-complete'
    Plug 'moll/vim-node'
    if IsPython3Enabled()
        Plug 'davidhalter/jedi-vim', {'for': 'python'}
    endif
endif
"}}}
"filetype{{{
"if exists('*getcurpos')
"    Plug 'sheerun/vim-polyglot'
"endif
"Plug 'vim-scripts/aspvbs.vim'
Plug 'posva/vim-vue'
Plug 'mustache/vim-mustache-handlebars'
Plug 'vim-latex/vim-latex'
"Plug 'leafOfTree/vim-vue-plugin'
"}}}
"misc{{{
if has('cscope') && executable('cscope')
    Plug 'brookhong/cscope.vim', {'as': 'cscove'}
endif
Plug 'shiluotang/vim-maven-plugin'
"if version > 703
"    Plug 'Chiel92/vim-autoformat'
"endif
"Plug 'adizero/vim-clang-format'
Plug 'godlygeek/tabular'
Plug 'junegunn/vim-easy-align'
if version >= 801 || has('nvim')
    " If you don't have nodejs and yarn
    " use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
    " see: https://github.com/iamcco/markdown-preview.nvim/issues/50
    Plug 'iamcco/markdown-preview.nvim', {'do': ':call mkdp#util#install()', 'for': ['markdown', 'vim-plug']}
else
    Plug 'iamcco/mathjax-support-for-mkdp'
    if IsPythonEnabled()
        Plug 'iamcco/markdown-preview.vim'
    endif
endif
if version >= 800
    Plug 'preservim/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
elseif version >= 704
    Plug 'preservim/nerdtree', {'tag': '5.3.3', 'as': 'nerdtree-vim74'}
    Plug 'Xuyuanp/nerdtree-git-plugin', {'commit': 'f52c6b3a', 'as': 'nerdtree-git-plugin-vim74'}
elseif version >= 703
    Plug 'preservim/nerdtree', {'tag': '4.1.0', 'as': 'nerdtree-vim73'}
endif

if version >= 704
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
elseif version >= 703
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-gitbranch'
endif

let g:nerd_font_in_terminal = 1
if !exists('g:nerd_font_in_terminal')
    let g:nerd_font_in_terminal = 0
endif
if has('gui_running')
    if IsNerdFont()
        Plug 'ryanoasis/vim-devicons'
    endif
else
    if g:nerd_font_in_terminal == 1
        Plug 'ryanoasis/vim-devicons'
    endif
endif

Plug 'vim-scripts/dbext.vim'
"Plug 'vim-scripts/csv.vim', {'as': 'vim-csv'}
Plug 'chrisbra/csv.vim'
if executable('w3m')
    Plug 'yuratomo/w3m.vim'
endif
Plug 'thinca/vim-fontzoom'
if executable('ctags')
    Plug 'preservim/tagbar'
endif
"Plug 'tpope/vim-capslock'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': ':call fzf#install()' }
Plug 'junegunn/fzf.vim'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
"}}}
call plug#end()
endfunction

function DumpMavenClasspath()
    let s:classpath_filename = '.jccp'
    let s:found = findfile('pom.xml', '.;')
    let s:dir = fnamemodify(s:found, ':p:h')
    if !empty(s:found)
        call system('mvn -o -q -f '
                    \ . s:found
                    \ . ' dependency:build-classpath'
                    \ . ' -Dmdep.cpFile='
                    \ . s:classpath_filename)
        let s:classpaths_file = s:dir . '/' . s:classpath_filename
        if filereadable(s:classpaths_file)
            for line in readfile(s:classpaths_file, '', 1)
                "for entry in split(line, ':')
                "    echo entry
                "endfor
                call javacomplete#SetClassPath(line)
                if isdirectory(s:dir . '/target/classes')
                    call javacomplete#AddClassPath(s:dir . '/target/classes')
                endif
            endfor
        else
            echo s:classpaths_file . ' is not readable'
        endif
    endif
endfunction

function DumpMavenClasspath2()
    let s:found = findfile('pom.xml', '.;')
    let s:dir = fnamemodify(s:found, ':p:h')
    if !empty(s:found)
        let s:cmd = 'mvn -o -f '
                    \ . shellescape(s:found)
                    \ . ' dependency:build-classpath'
        let s:lines = []
        if exists('*systemlist')
            let s:lines = systemlist(s:cmd)
        else
            let s:lines = split(system(s:cmd), '\n')
        endif
        let s:classpaths = []
        for s:line in s:lines
            if s:line =~ '^['
            else
                call extend(s:classpaths, split(s:line, ':'))
            endif
        endfor
        for s:classpath in uniq(sort(s:classpaths))
            echo s:classpath
        endfor
    endif
endfunction

function s:CustomizePlugins()
if PlugLoaded('nerdtree')
            \ || PlugLoaded('nerdtree-vim74')
            \ || PlugLoaded('nerdtree-vim73')
    if has("win32") || has("win64")
        if &encoding != 'utf-8'
            let NERDTreeDirArrows=0
        endif
    endif
    map <C-n> :NERDTreeToggle<CR>
    "map <C-m> :NERDTreeFind<CR>
    let NERDTreeRespectWildIgnore = 1
else
    let g:netrw_banner = 0
    let g:netrw_liststyle = 3
    let g:netrw_browse_split = 4
    let g:netrw_altv = 1
    let g:netrw_winsize = 25
    augroup ProjectDrawer
        autocmd!
        autocmd VimEnter * :Vexplore
    augroup END
endif

if PlugLoaded('vim-airline')
    if version <= 703
        let g:airline#extensions#branch#enabled = 0
    endif
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#searchcount#enabled = 0
    "" This is useless, airline won't load coc extension
    "if PlugLoaded('coc.nvim')
    "    let g:airline#extensions#coc#enabled = 1
    "endif
    if PlugLoaded('capslock')
        let g:airline#extensions#capslock#enabled = 1
    endif
    "let g:airline#extensions#whitespace#enabled = 1
    "if PlugLoaded('vcscommand.vim')
    "    if !PlugLoaded('vim-fugitive')
    "        "let g:airline#extensions#branch#use_vcscommand = 1
    "    endif
    "endif
    if has('gui_running')
        if IsSymbolicFont()
            let g:airline_powerline_fonts = 1
            "fix the stupid update without considering nerd fonts
            if !exists('g:airline_symbols')"{{{
                let g:airline_symbols = {}
            endif
            let g:airline_symbols.colnr = ' :'"}}}
        else
            let g:airline_symbols_ascii = 1
        endif
    elseif g:nerd_font_in_terminal == 1
        let g:airline_powerline_fonts = 1
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif
        let g:airline_symbols.colnr = ' :'
    else
        let g:airline_symbols_ascii = 1
    endif
endif

if PlugLoaded('cscove')
    let g:cscope_auto_update = 1
    let g:cscope_silent = 1
    "Below is the minimum key mappings.
    nnoremap <Leader>fx :call CscopeFindInteractive(expand('<cword>'))<CR>
    nnoremap <Leader>lo :call ToggleLocationList()<CR>
    "Some optional key mappings to search directly.
    " s: Find this C symbol
    nnoremap  <Leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
    " g: Find this definition
    nnoremap  <Leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
    " d: Find functions called by this function
    nnoremap  <Leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
    " c: Find functions calling this function
    nnoremap  <Leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
    " t: Find this text string
    nnoremap  <Leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
    " e: Find this egrep pattern
    nnoremap  <Leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
    " f: Find this file
    nnoremap  <Leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
    " i: Find files #including this file
    nnoremap  <Leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
    " a: Find this C symbol assigned
    nnoremap  <Leader>fa :call CscopeFind('a', expand('<cword>'))<CR>
endif

if PlugLoaded('vcscommand.vim')
    nmap <Leader>cjr :execute "VCSReview "      . expand("<cword>") . ""<CR>
    nmap <Leader>cjd :execute "VCSDiff "        . expand("<cword>") . ""<CR>
    nmap <Leader>cjv :execute "VCSVimDiff "     . expand("<cword>") . ""<CR>
    nmap <Leader>cjn :execute "VCSAnnotate "    . expand("<cword>") . ""<CR>
    nmap <Leader>cjN :execute "VCSAnnotate! "   . expand("<cword>") . ""<CR>
endif

if PlugLoaded('clang_complete')
    let g:clang_complete_macros=1
    if has('macunix')
        let s:candidates = [
                    \ '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib',
                    \ '/Library/Developer/CommandLineTools/usr/lib'
                    \ ]
        for s:candidate in s:candidates
            let s:candidate = s:candidate . '/libclang.dylib'
            if executable(s:candidate)
                let g:clang_library_path = s:candidate
                let g:clang_use_library = 1
                break
            endif
        endfor
    elseif has('win32')
        let s:candidate = expand('$PROGRAMFILES/LLVM/bin/libclang.dll')
        if filereadable(s:candidate)
            let g:clang_library_path = s:candidate
            let g:clang_use_library = 1
        endif
        if has('python_compiled')
            if &pythondll == "python27.dll" && !exists('$PYTHONHOME')
                let s:candidate = expand('C:/Python27')
                if filereadable(expand(s:candidate . '/DLLs/' . &pythondll))
                    execute 'set pythonhome=' . s:candidate
                endif
            endif
        endif
        if has('python3_compiled')
            if &pythonthreedll == "python37.dll" && !exists('$PYTHONHOME')
                let s:candidate = expand('C:/Python37')
                if filereadable(expand(s:candidate . '/DLLs/python' . &pythonthreedll))
                    execute 'set pythonthreehome=' . s:candidate
                endif
            endif
        endif
    elseif has('unix')
        let s:clang_library_paths = [
                    \ '/usr/lib/llvm-10/lib',
                    \ '/usr/lib/llvm-9/lib',
                    \ '/usr/lib/llvm-8/lib',
                    \ '/usr/lib/llvm-7/lib'
                    \ ]
        for s:clang_library_path in s:clang_library_paths
            if filereadable(s:clang_library_path . '/libclang.so')
                let g:clang_library_path=s:clang_library_path
                unlet s:clang_library_path
                break
            endif
        endfor
    endif
endif

if PlugLoaded('vim-maven-plugin')
    if has('autocmd')
        autocmd filetype java compiler maven
    endif
endif

if PlugLoaded('vim-javacomplete2')
    if has('autocmd')
        autocmd filetype java setlocal omnifunc=javacomplete#Complete
    endif
endif

"use local terminfo to solve terminal color problems
"$ mkdir -p ~/.terminfo/g
"$ ln -s /usr/share/terminfo/g/gnome-256color ~/.terminfo/x/xterm
"$ mkdir -p ~/.terminfo/s
"$ ln -s /usr/share/terminfo/s/screen-256color-s ~/.terminfo/s/screen
"available: 'light', 'mirage', 'dark'
let ayucolor = 'mirage'
"available: 'default', 'palenight', 'ocean', 'lighter', 'darker'
"available: 'default-community', 'palenight-community', 'ocean-community'
"available: 'lighter-community', 'darker-community'
let g:material_theme_style = 'default'
let g:material_terminal_italics = 1
" available: night, storm
let g:tokyonight_style = 'storm'
let g:tokyonight_enable_italic = 1
let g:molokai_original = 1

if PlugLoaded('nord-vim')
    if ! exists("g:colors_name")
        colorscheme nord
    endif
endif

if PlugLoaded('vim-devicons')
    if has('gui_running')
        let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
        let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
    else
        let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
        let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    endif
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:DevIconsEnableFoldersOpenClose = 1
    if has('macunix')
        let g:WebDevIconsOS = 'Darwin'
    endif
    let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''
endif

if PlugLoaded('nerdtree-git-plugin')
    let g:NERDTreeGitStatusConcealBrackets = 1
    let g:NERDTreeGitStatusPorcelainVersion = 1
    if has('gui_running')
        if IsNerdFont()
            let g:NERDTreeGitStatusUseNerdFonts = 1
        endif
    elseif g:nerd_font_in_terminal == 1
        let g:NERDTreeGitStatusUseNerdFonts = 1
    endif
endif

if PlugLoaded('vim-eclim')
    if has("autocmd")
        autocmd filetype java map <buffer> <LocalLeader>es :JavaSearch<CR>
        autocmd filetype java map <buffer> <LocalLeader>eS :JavaSearchContext<CR>
        autocmd filetype java map <buffer> <LocalLeader>ef :JavaFormat<CR>
        autocmd filetype java map <buffer> <LocalLeader>eF :%JavaFormat<CR>
        autocmd filetype java map <buffer> <LocalLeader>ei :JavaImport<CR>
        autocmd filetype java map <buffer> <LocalLeader>eI :JavaImportOrganize<CR>
        autocmd filetype java map <buffer> <LocalLeader>ed :JavaDocPreview<CR>
        autocmd filetype java map <buffer> <LocalLeader>eD :JavaDocSearch<CR>
        autocmd filetype java map <buffer> <LocalLeader>eh :JavaHierarchy<CR>
        autocmd filetype java map <buffer> <LocalLeader>ec :JavaCallHierarchy<CR>
        autocmd filetype java map <buffer> <LocalLeader>eC :JavaCallHierarchy!<CR>
        autocmd filetype java map <buffer> <LocalLeader>ev :Validate<CR>
        autocmd filetype java map <buffer> <LocalLeader>ep :JavaImpl<CR>

        " add bean methods
        autocmd filetype java map <buffer> <LocalLeader>eba :JavaGetSet<CR>
        autocmd filetype java map <buffer> <LocalLeader>ebg :JavaGet<CR>
        autocmd filetype java map <buffer> <LocalLeader>ebs :JavaSet<CR>

        " other things
        autocmd filetype java setlocal textwidth=80 formatoptions+=tm
    endif
    " disable eclim all languages validation
    let g:EclimFileTypeValidate = 0
    let g:EclimMakeLCD = 0
endif

"if PlugLoaded('vim-polyglot')
"    let g:polyglot_disabled = ['autoindent', 'sensible']
"endif

if PlugLoaded('lightline.vim')
    if PlugLoaded('vim-gitbranch')
        let g:lightline =
                    \ {
                    \   'active': {
                    \     'left': [ [ 'mode', 'paste' ],
                    \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                    \   },
                    \   'component_function': {
                    \     'gitbranch': 'FugitiveHead'
                    \   }
                    \ }

    elseif PlugLoaded('vim-fugitive')
                \ || PlugLoaded('vim-fugitive-vim74')
                \ || PlugLoaded('vim-fugitive-vim73')
        let g:lightline =
                    \ {
                    \   'active': {
                    \     'left': [ [ 'mode', 'paste' ],
                    \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                    \   },
                    \   'component_function': {
                    \     'gitbranch': 'FugitiveHead'
                    \   }
                    \ }
    endif
    if PlugLoaded('vim-devicons')
        let g:lightline = {
          \ 'component_function': {
          \   'filetype': 'MyFiletype',
          \   'fileformat': 'MyFileformat',
          \ }
          \ }
        function! MyFiletype()
          return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
        endfunction

        function! MyFileformat()
          return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
        endfunction
    endif
endif

if PlugLoaded('w3m.vim')
    let g:w3m#homepage = "http://news.baidu.com/"
    "let g:w3m#search_engine = 'http://search.yahoo.co.jp/search?'
    "            \ . 'search.x=1&fr=top_ga1_sa_124&tid=top_ga1_sa_124&ei='
    "            \ . &encoding
    "            \ . '&aq=&oq=&p='
    let g:w3m#search_engine = 'https://www.baidu.com/s?ie='
                \ . &encoding
                \ . '&wd='
    let g:w3m#lang = 'en_US'
    let g:w3m#disable_vimproc = 1
endif

if PlugLoaded('javacomplete')
    augroup JavaComplete
        autocmd filetype java setlocal omnifunc=javacomplete#Complete
        autocmd filetype java call DumpMavenClasspath()
    augroup END
endif

if PlugLoaded('coc.nvim')
    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " code navigation.
    nmap <silent>   <Leader>gl <Plug>(coc-codelens-action)
    nmap <silent>   <Leader>gd <Plug>(coc-definition)
    nmap <silent>   <Leader>gy <Plug>(coc-type-definition)
    nmap <silent>   <Leader>gi <Plug>(coc-implementation)
    nmap <silent>   <Leader>gr <Plug>(coc-references)
    nmap <silent>   <Leader>gR <Plug>(coc-references-used)
    nmap <silent>   <Leader>gG <Plug>(coc-format)
    nmap <silent>   <Leader>gf <Plug>(coc-fix-current)
    nmap <silent>   <Leader>ga <Plug>(coc-codeaction-selected)
    nmap <silent>   <Leader>gF <Plug>(coc-codeaction)
    nmap            <Leader>rn <Plug>(coc-rename)
    nmap <silent>   <Leader>n  :CocCommand explorer<CR>
    nmap <silent>   <Leader>gD :CocDiagnostics<CR>
    nmap <silent>   <Leader>go :CocOutline<CR>

    " Use K to show documentation in preview window.
    nnoremap <silent> <Leader>gk :call <SID>show_documentation()<CR>
    if &completefunc =~ ""
        inoremap <silent><expr> <C-x><C-u> coc#refresh()
    endif

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h ' . expand('<cword>')
        elseif (coc#rpc#ready())
            call CocActionAsync('doHover')
        else
            execute '!' . &keywordprg . " " . expand('<cword>')
        endif
    endfunction

    "" Highlight the symbol and its references when holding the cursor.
    "autocmd CursorHold * silent call CocActionAsync('highlight')

    if has('nvim-0.4.0') || has('patch-8.2.0750')
        nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
        nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
        inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
        vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
        vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    if exists('&tagfunc')
        autocmd filetype vim,typescript,javascript,java,c,cpp,cs,json,python,lua,sh,cmake setlocal tagfunc=CocTagFunc
    else
        autocmd filetype vim,typescript,javascript,java,c,cpp,cs,json,python,lua,sh,cmake
                    \ nnoremap <buffer> <silent> <C-]> <Leader>gd
        autocmd filetype vim,typescript,javascript,java,c,cpp,cs,json,python,lua,sh,cmake
                    \ nnoremap <buffer> <silent> <C-T> <C-O>
    endif
endif

if PlugLoaded('tagbar')
    nmap <Leader>t :TagbarToggle<CR>
    let g:tagbar_iconchars = ['▸', '▾']
endif

if PlugLoaded('vista.vim')
    let g:vista_sidebar_width = 50
    map <Leader>vv :Vista!!<CR>
    map <Leader>vf :Vista finder fzf:coc<CR>
    let g:vista#renderer#icons = {
                \ 'constructor': "\u2295",
                \ 'package': "\uf487",
                \ 'packages': "\uf487",
                \ 'method': "\uf794",
                \ }
    let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
    " Ensure you have installed some decent font to show these pretty symbols,
    " then you can enable icon for the kind.
    let g:vista#renderer#enable_icon = 1

    if PlugLoaded('coc.nvim')
        let g:vista_default_executive = 'coc'
    endif
endif

if PlugLoaded('vim-lsp')
    if executable('pyls')
        " pip install python-language-server
        au User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'allowlist': ['python'],
            \ })
    endif
    let g:lsp_async_completion = 1
    let g:lsp_document_highlight_enabled = 0
    let g:lsp_document_code_action_signs_enabled = 0
    let g:lsp_log_file = expand('~/.vim/vim-lsp.log')
    " signs
    let g:lsp_diagnostics_signs_error = {'text': '✘'}
    let g:lsp_diagnostics_signs_warning = {'text': '⚠'}
    let g:lsp_diagnostics_signs_information = {'text': ''}
    let g:lsp_diagnostics_signs_hint = {'text': '➤'}

    function! s:on_lsp_buffer_enabled() abort
        "autocmd filetype typescript,java
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes

        ""fold
        "setlocal foldmethod=expr
        "setlocal foldexpr=lsp#ui#vim#folding#foldexpr()
        "setlocal foldtext=lsp#ui#vim#folding#foldtext()

        if exists('+tagfunc')
            setlocal tagfunc=lsp#tagfunc
        endif
        nmap <buffer> <Leader>gd <Plug>(lsp-definition)
        nmap <buffer> <Leader>gs <Plug>(lsp-document-symbol-search)
        nmap <buffer> <Leader>gS <Plug>(lsp-workspace-symbol-search)
        nmap <buffer> <Leader>gr <Plug>(lsp-references)
        nmap <buffer> <Leader>gi <Plug>(lsp-implementation)
        nmap <buffer> <Leader>gt <Plug>(lsp-type-definition)
        nmap <buffer> <Leader>rn <Plug>(lsp-rename)
        nmap <buffer> [g         <Plug>(lsp-previous-diagnostic)
        nmap <buffer> ]g         <Plug>(lsp-next-diagnostic)
        nmap <buffer> <Leader>gk <Plug>(lsp-hover)
        nmap <buffer> <Leader>gf <Plug>(lsp-code-action)
        nmap <buffer> <Leader>gh <Plug>(lsp-type-hierarchy)
        nmap <buffer> <Leader>gD <Plug>(lsp-document-diagnostics)

        nnoremap <buffer><expr> <C-f> lsp#scroll(+4)
        nnoremap <buffer><expr> <C-d> lsp#scroll(-4)
        inoremap <buffer><expr> <C-f> lsp#scroll(+4)
        inoremap <buffer><expr> <C-d> lsp#scroll(-4)

        let g:lsp_format_sync_timeout = 1000
        autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

        " refer to doc to add more commands
    endfunction

    augroup lsp_install
        au!
        " call s:on_lsp_buffer_enabled only for languages that has the server registered.
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
endif

if PlugLoaded('LanguageClient-neovim')
    " note that if you are using Plug mapping you should not use `noremap` mappings.
    nmap <buffer> <Leader>gf    <Plug>(lcn-menu)
    " Or map each action separately
    nmap <silent> <Leader>gk    <Plug>(lcn-hover)
    nmap <silent> <Leader>gd    <Plug>(lcn-definition)
    nmap <silent> <Leader>rn    <Plug>(lcn-rename)
endif

if PlugLoaded('fzf.vim')
    nmap <Leader>F :Files<CR>
    nmap <Leader>B :Buffers<CR>
endif

if PlugLoaded('vim-easy-align')
    xmap <Leader>ea <Plug>(EasyAlign)
    nmap <Leader>ea <Plug>(EasyAlign)
endif

if PlugLoaded('markdown-preview.nvim')
    let s:plantuml = expand('$HOME/Downloads/plantuml/plantuml.sh')
    if executable(s:plantuml)
        let s:status = system(s:plantuml . ' status')
        if s:status !~ "NOT"
            let s:port = substitute(substitute(s:status, '^.*at port(', '', 'g'), ').*$', '', 'g')
            let g:mkdp_preview_options = {
                        \ 'uml': {
                        \   'server': 'http://localhost:' . s:port . '/plantuml'
                        \   }
                        \ }
        else
            "echomsg "plantuml is not locally started use remote server"
        endif
    endif
endif

if PlugLoaded('vim-easycomplete')
  let g:easycomplete_tab_trigger="<c-x><c-u>"
endif

if PlugLoaded('vim-commentary')
    autocmd FileType cpp setlocal commentstring=//%s
endif
endfunction

call s:LoadPlugins()
call s:CustomizePlugins()

if has('multi_byte')
    set fileencodings=ucs-bom,utf-8
    set fileencodings+=chinese,japanese,korean
    set fileencodings+=default,latin1
endif

if has('autocmd')
    autocmd filetype c      setlocal textwidth=80 syntax=c.doxygen
    autocmd filetype cpp    setlocal textwidth=80 syntax=cpp.doxygen
    autocmd filetype java   setlocal textwidth=80
    autocmd filetype php    setlocal syntax=php.doxygen
    autocmd filetype idl    setlocal syntax=idl.doxygen
    autocmd filetype javascript setlocal syntax=javascript.doxygen
    autocmd filetype python let python_highlight_all = 1
    autocmd BufReadCmd *.nar call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.tar.gz call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.jar.original call zip#Browse(expand("<amatch>"))
    if filereadable(expand('$VIMRUNTIME/ftplugin/man.vim'))
        runtime ftplugin/man.vim
        "autocmd filetype c,cpp,java setlocal keywordprg=:Man\ 3
        nnoremap K :<C-U>exe "Man" v:count "<C-R><C-W>"<CR>
    endif
endif

if version >= 703
    set colorcolumn=+1
endif
if version >= 800
    set scrolloff=0
endif

set tabstop=4
set shiftwidth=4
set expandtab
"set number

if filereadable(expand('$VIMRUNTIME/macros/matchit.vim'))
    execute "source " . expand('$VIMRUNTIME/macros/matchit.vim')
endif

if has('nvim')
    autocmd UIEnter * call s:GuiConfig()
elseif has('gui_running')
    call s:GuiConfig()
else
    autocmd GUIEnter * call s:GuiConfig()
endif

" vim: foldmethod=marker
