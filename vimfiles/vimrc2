if has('win32')
    if expand('$lang') =~ '.*UTF-8'
    else
        let $LANG=expand('$lang') . '.UTF-8'
        set encoding=utf-8
        if version >= 802 && has('iconv')
            set makeencoding=char
        endif
    endif
endif
source $VIMRUNTIME/vimrc_example.vim
if has('gui_running')
    source $VIMRUNTIME/gvimrc_example.vim
    if has('gui_gtk')
        "set guifont=Courier\ 10\ Pitch\ 12
        "set guifont=Courier\ 10\ Pitch\ for\ Powerline\ 12
        "set guifont=Courier\ Prime\ for\ Powerline\ 12
        "set guifont=Courier\ for\ Powerline\ 12
        "set guifont=DroidSansMono\ Nerd\ Font\ Mono\ 12
        "set guifont=Cousine\ Nerd\ Font\ Mono\ 12
        "set guifont=GoMono\ Nerd\ Font\ Mono\ 12
        set guifont=FuraCode\ Nerd\ Font\ Mono\ Medium\ 12
    elseif has('x11')
        set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
    elseif has('gui_win32')
        set guifont=Courier_New:h10
        set guifont=Anonymice_Powerline:h10:cANSI
        set guifont=Cousine_NF:h10:cANSI
    elseif has('gui_macvim') || has('gui_mac')
        "set guifont=CousineForPowerline:h12
        "set guifont=CourierPrimeForPowerline:h20
        set guifont=CourierForPowerline:h20
        "set guifont=DroidSansMonoNerdFontCompleteM-:h20
        "set guifont=FuraCodeNerdFontCompleteM-Light:h20
    endif
endif
if has('gui')
    set guioptions+=a
    set guioptions+=P
    set guioptions+=c
    "set guioptions+=A
    " preserve icon
    "set guioptions-=i
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=b
    set guioptions-=h
endif

let g:vim_plug_path_prefix = &rtp[0 : stridx(&rtp, ",") - 1]
let g:vim_plug_path = g:vim_plug_path_prefix . "/autoload/plug.vim"

if empty(glob(expand(g:vim_plug_path)))
    if executable('curl')
        execute 'silent !curl -fLo ' . g:vim_plug_path .' --create-dirs "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    elseif executable('wget')
        if !isdirectory(expand(g:vim_plug_path_prefix . '/autoload'))
            if has('*mkdir')
                mkdir(expand(g:vim_plug_path_prefix . '/autoload'), 'p')
            else
                execute 'silent !mkdir ' . expand(g:vim_plug_path_prefix)
                execute 'silent !mkdir ' . expand(g:vim_plug_path_prefix . '/autoload')
            endif
        endif
        execute 'silent !wget -O ' . expand(g:vim_plug_path) . ' --no-check-certificate "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    else
        echoerr "curl and wget are all missing!!!"
    endif
endif

call plug#begin(expand('$HOME/.vim/plugged'))
"""""""""""""""""""""""""""""
"scm
"""""""""""""""""""""""""""""
Plug 'vim-scripts/vcscommand.vim'
if version >= 800
    Plug 'tpope/vim-fugitive', {'as': 'vim-fugitive-vim8'}
elseif version >= 704
    Plug 'tpope/vim-fugitive', {'tag': 'v3.1', 'as': 'vim-fugitive-vim74'}
elseif version >= 703
    Plug 'tpope/vim-fugitive', {'tag': 'v2.2', 'as': 'vim-fugitive-vim73'}
endif
if has('nvim') || has('patch-8.0.902')
    Plug 'mhinz/vim-signify'
elseif version >= 704
    Plug 'mhinz/vim-signify', {'tag': 'legacy'}
endif
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
"colorschemes
"""""""""""""""""""""""""""""
"Plug 'vim-scripts/Colour-Sampler-Pack'
Plug 'altercation/vim-colors-solarized'
Plug 'flazz/vim-colorschemes'
Plug 'joshdick/onedark.vim'
Plug 'dracula/vim', {'as': 'dracula.vim'}
Plug 'chriskempson/base16-vim'
Plug 'equt/paper.vim'
Plug 'rakr/vim-one'
Plug 'ghifarit53/tokyonight-vim'
"Plug 'NLKNguyen/papercolor-theme'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
"intellisense
"""""""""""""""""""""""""""""
if has('python') || has('python3')
    Plug 'xavierd/clang_complete'
endif
if has('python3')
    "Plug 'artur-shaik/vim-javacomplete2', {'for': 'java'}
endif
"Plug 'shiluotang/vim-eclim'
if version >= 800
    Plug 'neoclide/coc.nvim', {'branch': 'release', 'for': 'javascript'}
else
    Plug 'leafgarland/typescript-vim'
    Plug 'pangloss/vim-javascript'
    Plug 'myhere/vim-nodejs-complete'
    Plug 'moll/vim-node'
endif
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
"filetype
"""""""""""""""""""""""""""""
"if exists('*getcurpos')
"    Plug 'sheerun/vim-polyglot'
"endif
Plug 'vim-scripts/aspvbs.vim'
Plug 'posva/vim-vue'
Plug 'mustache/vim-mustache-handlebars'
Plug 'vim-latex/vim-latex'
"Plug 'leafOfTree/vim-vue-plugin'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
"misc
"""""""""""""""""""""""""""""
if has('cscope') && executable('cscope')
    Plug 'vim-scripts/cscope.vim'
endif
Plug 'shiluotang/vim-maven-plugin'
if version > 703
    Plug 'Chiel92/vim-autoformat'
endif
"Plug 'adizero/vim-clang-format'
Plug 'iamcco/mathjax-support-for-mkdp'
if has('python') || has('python3')
    Plug 'iamcco/markdown-preview.vim'
endif
if version >= 800
    Plug 'preservim/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
elseif version >= 704
    Plug 'preservim/nerdtree', {'tag': '5.3.3', 'as': 'nerdtree-vim74'}
    Plug 'Xuyuanp/nerdtree-git-plugin', {'commit': 'f52c6b3a', 'as': 'nerdtree-git-plugin-vim74'}
elseif version >= 703
    Plug 'preservim/nerdtree', {'tag': '4.1.0', 'as': 'nerdtree-vim73'}
endif

if version >= 704
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
elseif version >= 703
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-gitbranch'
endif

"let g:nerd_font_in_terminal = 1
if !exists('g:nerd_font_in_terminal')
    let g:nerd_font_in_terminal = 0
endif
if has('gui_running')
    if &guifont =~ 'Nerd Font'
                \ || &guifont =~ 'NerdFont'
                \ || &guifont =~ '_NF'
        Plug 'ryanoasis/vim-devicons'
    endif
elseif g:nerd_font_in_terminal == 1
    Plug 'ryanoasis/vim-devicons'
endif

if version >= 704
    Plug 'mhinz/vim-startify'
endif
"""""""""""""""""""""""""""""
call plug#end()

function! PlugLoaded(name)
    if has_key(g:plugs, a:name)
        let plugdir = g:plugs[a:name].dir
        let fixed_plugdir = substitute(substitute(plugdir, '\\$', '/', ''),
                    \ '\/$', '', '')
        return isdirectory(fixed_plugdir) && stridx(&rtp, fixed_plugdir)
    endif
    return 0
endfunction

if PlugLoaded('nerdtree')
            \ || PlugLoaded('nerdtree-vim74')
            \ || PlugLoaded('nerdtree-vim73')
    if has("win32") || has("win64")
        if &encoding != 'utf-8'
            let NERDTreeDirArrows=0
        endif
    endif
    map <C-n> :NERDTreeToggle<CR>
else
    let g:netrw_banner = 0
    let g:netrw_liststyle = 3
    let g:netrw_browse_split = 4
    let g:netrw_altv = 1
    let g:netrw_winsize = 25
    augroup ProjectDrawer
      autocmd!
      autocmd VimEnter * :Vexplore
    augroup END
endif

if PlugLoaded('vim-airline')
    if version <= 703
        let g:airline#extensions#branch#enabled = 0
    endif
    let g:airline#extensions#tabline#enabled = 1
    "let g:airline#extensions#whitespace#enabled = 1
    "if PlugLoaded('vcscommand.vim')
    "    if !PlugLoaded('vim-fugitive')
    "        "let g:airline#extensions#branch#use_vcscommand = 1
    "    endif
    "endif
    if has('gui_running')
        if &guifont =~ 'Powerline'
                    \ || &guifont =~ 'NerdFont'
                    \ || &guifont =~ 'Nerd Font'
                    \ || &guifont =~ '_NF'
            let g:airline_powerline_fonts = 1
        else
            let g:airline_symbols_ascii = 1
        endif
    elseif g:nerd_font_in_terminal == 1
        let g:airline_powerline_fonts = 1
    else
        let g:airline_symbols_ascii = 1
    endif
endif

if PlugLoaded('cscope.vim')
    let g:cscope_silent = 1
    "Below is the minimum key mappings.
    nnoremap <leader>fa :call cscope#findInteractive(expand('<cword>'))<CR>
    nnoremap <leader>lo :call ToggleLocationList()<CR>
    "Some optional key mappings to search directly.
    " s: Find this C symbol
    nnoremap  <leader>fs :call cscope#find('s', expand('<cword>'))<CR>
    " g: Find this definition
    nnoremap  <leader>fg :call cscope#find('g', expand('<cword>'))<CR>
    " d: Find functions called by this function
    nnoremap  <leader>fd :call cscope#find('d', expand('<cword>'))<CR>
    " c: Find functions calling this function
    nnoremap  <leader>fc :call cscope#find('c', expand('<cword>'))<CR>
    " t: Find this text string
    nnoremap  <leader>ft :call cscope#find('t', expand('<cword>'))<CR>
    " e: Find this egrep pattern
    nnoremap  <leader>fe :call cscope#find('e', expand('<cword>'))<CR>
    " f: Find this file
    nnoremap  <leader>ff :call cscope#find('f', expand('<cword>'))<CR>
    " i: Find files #including this file
    nnoremap  <leader>fi :call cscope#find('i', expand('<cword>'))<CR>
endif

if PlugLoaded('vcscommand.vim')
    nmap <Leader>cjr :execute "VCSReview "      . expand("<cword>") . ""<CR>
    nmap <Leader>cjd :execute "VCSDiff "        . expand("<cword>") . ""<CR>
    nmap <Leader>cjv :execute "VCSVimDiff "     . expand("<cword>") . ""<CR>
    nmap <Leader>cjn :execute "VCSAnnotate "    . expand("<cword>") . ""<CR>
    nmap <Leader>cjN :execute "VCSAnnotate! "   . expand("<cword>") . ""<CR>
endif

if PlugLoaded('clang_complete')
    let g:clang_complete_macros=1
    if has('macunix')
        let s:candidates = [
                    \ '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib',
                    \ '/Library/Developer/CommandLineTools/usr/lib'
                    \ ]
        for s:candidate in s:candidates
            let s:candidate = s:candidate . '/libclang.dylib'
            if executable(s:candidate)
                let g:clang_library_path = s:candidate
                let g:clang_use_library = 1
                break
            endif
        endfor
    elseif has('win32')
        let s:candidate = expand('$PROGRAMFILES/LLVM/bin/libclang.dll')
        if filereadable(s:candidate)
            let g:clang_library_path = s:candidate
            let g:clang_use_library = 1
        endif
        if has('python_compiled')
            if &pythondll == "python27.dll" && !exists('$PYTHONHOME')
                let s:candidate = expand('C:/Python27')
                if filereadable(expand(s:candidate . '/DLLs/' . &pythondll))
                    execute 'set pythonhome=' . s:candidate
                endif
            endif
        endif
        if has('python3_compiled')
            if &pythonthreedll == "python37.dll" && !exists('$PYTHONHOME')
                let s:candidate = expand('C:/Python37')
                if filereadable(expand(s:candidate . '/DLLs/python' . &pythonthreedll))
                    execute 'set pythonthreehome=' . s:candidate
                endif
            endif
        en
    endif
endif

if PlugLoaded('vim-maven-plugin')
    if has('autocmd')
        autocmd filetype java compiler maven
    endif
endif

if PlugLoaded('vim-javacomplete2')
    if has('autocmd')
        autocmd filetype java setlocal omnifunc=javacomplete#Complete
    endif
endif

"use local terminfo to solve terminal color problems
"$ mkdir -p ~/.terminfo/g
"$ ln -s /usr/share/terminfo/g/gnome-256color ~/.terminfo/x/xterm
"$ mkdir -p ~/.terminfo/s
"$ ln -s /usr/share/terminfo/s/screen-256color-s ~/.terminfo/s/screen
"available: 'light', 'mirage', 'dark'
let ayucolor = 'mirage'
"available: 'default', 'palenight', 'ocean', 'lighter', 'darker'
"available: 'default-community', 'palenight-community', 'ocean-community'
"available: 'lighter-community', 'darker-community'
let g:material_theme_style = 'default'
let g:material_terminal_italics = 1
" available: night, storm
let g:tokyonight_style = 'storm'
let g:tokyonight_enable_italic = 1
let g:molokai_original = 1
colorscheme solarized
if exists('g:colors_name') && g:colors_name =~ 'solarized'
    if has('gui_running')
        set background=dark
    else
        colorscheme darkblue
    endif
endif

if PlugLoaded('vim-devicons')
    if has('gui_running')
        let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
        let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
    else
        let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
        let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    endif
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:DevIconsEnableFoldersOpenClose = 1
endif
if PlugLoaded('nerdtree-git-plugin')
    let g:NERDTreeGitStatusConcealBrackets = 1
    if has('gui_running')
        if &guifont =~ 'Nerd Font'
                        \ || &guifont =~ 'NerdFont'
                        \ || &guifont =~ '_NF'
            let g:NERDTreeGitStatusUseNerdFonts = 1
        endif
    elseif g:nerd_font_in_terminal == 1
        let g:NERDTreeGitStatusUseNerdFonts = 1
    endif
endif

if PlugLoaded('vim-eclim')
    if has("autocmd")
        autocmd filetype java map <buffer> <LocalLeader>es :JavaSearch<CR>
        autocmd filetype java map <buffer> <LocalLeader>eS :JavaSearchContext<CR>
        autocmd filetype java map <buffer> <LocalLeader>ef :JavaFormat<CR>
        autocmd filetype java map <buffer> <LocalLeader>eF :%JavaFormat<CR>
        autocmd filetype java map <buffer> <LocalLeader>ei :JavaImport<CR>
        autocmd filetype java map <buffer> <LocalLeader>eI :JavaImportOrganize<CR>
        autocmd filetype java map <buffer> <LocalLeader>ed :JavaDocPreview<CR>
        autocmd filetype java map <buffer> <LocalLeader>eD :JavaDocSearch<CR>
        autocmd filetype java map <buffer> <LocalLeader>eh :JavaHierarchy<CR>
        autocmd filetype java map <buffer> <LocalLeader>ec :JavaCallHierarchy<CR>
        autocmd filetype java map <buffer> <LocalLeader>eC :JavaCallHierarchy!<CR>
        autocmd filetype java map <buffer> <LocalLeader>ev :Validate<CR>
        autocmd filetype java map <buffer> <LocalLeader>ep :JavaImpl<CR>

        " add bean methods
        autocmd filetype java map <buffer> <LocalLeader>eba :JavaGetSet<CR>
        autocmd filetype java map <buffer> <LocalLeader>ebg :JavaGet<CR>
        autocmd filetype java map <buffer> <LocalLeader>ebs :JavaSet<CR>

        " other things
        autocmd filetype java setlocal textwidth=80 formatoptions+=tm
    endif
    " disable eclim all languages validation
    let g:EclimFileTypeValidate = 0
    let g:EclimMakeLCD = 0
endif

"if PlugLoaded('vim-polyglot')
"    let g:polyglot_disabled = ['autoindent', 'sensible']
"endif

if PlugLoaded('lightline.vim')
    if PlugLoaded('vim-gitbranch')
        let g:lightline = {
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ],
              \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
              \ },
              \ 'component_function': {
              \   'gitbranch': 'gitbranch#name'
              \ },
              \ }
    endif
endif


if has('multi_byte')
    set fileencodings=ucs-bom,utf-8
    set fileencodings+=chinese,japanese,korean
    set fileencodings+=default,latin1
endif

if has('autocmd')
    autocmd filetype c      setlocal textwidth=80 syntax=c.doxygen
    autocmd filetype cpp    setlocal textwidth=80 syntax=cpp.doxygen
    autocmd filetype php    setlocal syntax=php.doxygen
    autocmd filetype idl    setlocal syntax=idl.doxygen
    autocmd filetype javascript setlocal syntax=javascript.doxygen
    autocmd filetype python let python_highlight_all = 1
    autocmd BufReadCmd *.nar call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.jar.original call zip#Browse(expand("<amatch>"))
    if filereadable(expand('$VIMRUNTIME/ftplugin/man.vim'))
        runtime ftplugin/man.vim
        autocmd filetype c,cpp,java setlocal keywordprg=:Man\ 3
    endif
endif

if version >= 703
    set colorcolumn=+1
endif
if version >= 800
    set scrolloff=0
endif

set tabstop=4
set shiftwidth=4
set expandtab
set number

if filereadable(expand('$VIMRUNTIME/macros/matchit.vim'))
    execute "source " . expand('$VIMRUNTIME/macros/matchit.vim')
endif
