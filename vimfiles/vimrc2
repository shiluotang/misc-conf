source $VIMRUNTIME/vimrc_example.vim
if has('gui_running')
    source $VIMRUNTIME/gvimrc_example.vim
    if has('gui_gtk')
        "set guifont=Courier\ 10\ Pitch\ 12
        "set guifont=Courier\ 10\ Pitch\ for\ Powerline\ 12
        "set guifont=Courier\ Prime\ for\ Powerline\ 12
        "set guifont=Courier\ for\ Powerline\ 12
        set guifont=DroidSansMono\ Nerd\ Font\ Mono\ 12
        "set guifont=Cousine\ Nerd\ Font\ Mono\ 12
    elseif has('x11')
        set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
    elseif has('gui_win32')
        set guifont=Courier_New:h12
    elseif has('gui_macvim') || has('gui_mac')
        "set guifont=CousineForPowerline:h12
        set guifont=CourierPrimeForPowerline:h24
        "set guifont=CourierForPowerline:h20
        "set guifont=DroidSansMonoNerdFontCompleteM-:h20
    endif
    set guioptions-=a
    set guioptions-=e
    set guioptions-=g
    " preserve icon
    "set guioptions-=i
    set guioptions-=m
    set guioptions-=r
    set guioptions-=L
    set guioptions-=t
    set guioptions-=T
endif

if empty(glob(expand('$HOME/.vim/autoload/plug.vim')))
    if executable('curl')
        silent !curl -fLo ~/.vim/autoload/plug.vim
                    \ --create-dirs
                    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    elseif executable('wget')
        if exists('*mkdir') && mkdir(expand('$HOME/.vim/autoload'), "p")
            silent !wget -O ~/.vim/autoload/plug.vim
                        \ --no-check-certificate
                        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
            autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    else
    endif
endif

call plug#begin(expand('$HOME/.vim/plugged'))
if has('cscope') && executable('cscope')
    Plug 'vim-scripts/cscope.vim'
endif
Plug 'vim-scripts/vcscommand.vim'
Plug 'vim-scripts/Colour-Sampler-Pack'
Plug 'vim-latex/vim-latex'
if version >= 800
    Plug 'preservim/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'tpope/vim-fugitive'
else
    Plug 'preservim/nerdtree', {'tag': '5.3.3'}
    Plug 'Xuyuanp/nerdtree-git-plugin', {'commit': 'f52c6b3ad7afe49a7f5231bd72c2e3f84c0a9706'}
    Plug 'tpope/vim-fugitive', {'tag': 'v3.1'}
endif
if has('nvim') || has('patch-8.0.902')
    Plug 'mhinz/vim-signify'
else
    Plug 'mhinz/vim-signify', {'tag': 'legacy'}
endif
Plug 'junegunn/seoul256.vim'
Plug 'morhetz/gruvbox'
Plug 'cocopon/iceberg.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'chrisbra/matchit'
Plug 'xavierd/clang_complete'
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'
Plug 'shiluotang/vim-maven-plugin'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
if has('gui_running')
    if &guifont =~ 'Nerd Font'
                \ || &guifont =~ 'NerdFont'
        Plug 'ryanoasis/vim-devicons'
    endif
endif
call plug#end()

function! PlugLoaded(name)
    return (
        \ has_key(g:plugs, a:name) &&
        \ isdirectory(substitute(g:plugs[a:name].dir, "\/$", "", "")) &&
        \ stridx(&rtp, substitute(g:plugs[a:name].dir, "\/$", "", "")) >= 0)
endfunction

if PlugLoaded('nerdtree')
    if has("win32") || has("win64")
        let NERDTreeDirArrows=0
    endif
    map <C-n> :NERDTreeToggle<CR>
else
    let g:netrw_liststyle = 3
    let g:netrw_banner = 0
    let g:netrw_browse_split = 1
endif

if PlugLoaded('vim-airline')
    let g:airline#extensions#tabline#enabled = 1
    "let g:airline#extensions#whitespace#enabled = 1
    "if PlugLoaded('vcscommand.vim')
    "    if !PlugLoaded('vim-fugitive')
    "        "let g:airline#extensions#branch#use_vcscommand = 1
    "    endif
    "endif
    if has('gui_running')
        if &guifont =~ 'Powerline'
                    \ || &guifont =~ 'NerdFont'
                    \ || &guifont =~ 'Nerd Font'
            let g:airline_powerline_fonts = 1
        else
            let g:airline_symbols_ascii = 1
        endif
    endif
endif

if PlugLoaded('cscope.vim')
    "Below is the minimum key mappings.
    nnoremap <leader>fa :call cscope#findInteractive(expand('<cword>'))<CR>
    nnoremap <leader>lo :call ToggleLocationList()<CR>
    "Some optional key mappings to search directly.
    " s: Find this C symbol
    nnoremap  <leader>fs :call cscope#find('s', expand('<cword>'))<CR>
    " g: Find this definition
    nnoremap  <leader>fg :call cscope#find('g', expand('<cword>'))<CR>
    " d: Find functions called by this function
    nnoremap  <leader>fd :call cscope#find('d', expand('<cword>'))<CR>
    " c: Find functions calling this function
    nnoremap  <leader>fc :call cscope#find('c', expand('<cword>'))<CR>
    " t: Find this text string
    nnoremap  <leader>ft :call cscope#find('t', expand('<cword>'))<CR>
    " e: Find this egrep pattern
    nnoremap  <leader>fe :call cscope#find('e', expand('<cword>'))<CR>
    " f: Find this file
    nnoremap  <leader>ff :call cscope#find('f', expand('<cword>'))<CR>
    " i: Find files #including this file
    nnoremap  <leader>fi :call cscope#find('i', expand('<cword>'))<CR>
endif

if PlugLoaded('vcscommand.vim')
    nmap <Leader>cjr :execute "VCSReview "      . expand("<cword>") . ""<CR>
    nmap <Leader>cjd :execute "VCSDiff "        . expand("<cword>") . ""<CR>
    nmap <Leader>cjv :execute "VCSVimDiff "     . expand("<cword>") . ""<CR>
    nmap <Leader>cjn :execute "VCSAnnotate "    . expand("<cword>") . ""<CR>
    nmap <Leader>cjN :execute "VCSAnnotate! "   . expand("<cword>") . ""<CR>
endif

if PlugLoaded('clang_complete')
    let g:clang_complete_macros=1
    if has('macunix')
        let s:candidates = [
                    \ '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib',
                    \ '/Library/Developer/CommandLineTools/usr/lib'
                    \ ]
        for s:candidate in s:candidates
            let s:candidate = s:candidate . '/libclang.dylib'
            if executable(s:candidate)
                let g:clang_library_path = s:candidate
                let g:clang_use_library = 1
                break
            endif
        endfor
    endif
endif

if PlugLoaded('vim-maven-plugin')
    if has('autocmd')
        autocmd filetype java compiler maven
    endif
endif

if PlugLoaded('vim-javacomplete2')
    if has('autocmd')
        autocmd filetype java setlocal omnifunc=javacomplete#Complete
    endif
endif

if PlugLoaded('seoul256.vim')
    colorscheme seoul256
endif

if PlugLoaded('vim-devicons')
  let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
  let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
  let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
  let g:webdevicons_conceal_nerdtree_brackets = 1
endif

if has('multi_byte')
    set fileencodings=ucs-bom,utf-8
    set fileencodings+=chinese,japanese,korean
    set fileencodings+=default,latin1
endif

if has('autocmd')
    autocmd filetype c      setlocal textwidth=80 syntax=c.doxygen
    autocmd filetype cpp    setlocal textwidth=80 syntax=cpp.doxygen
    autocmd filetype php    setlocal syntax=php.doxygen
    autocmd filetype idl    setlocal syntax=idl.doxygen
    autocmd filetype python let python_highlight_all = 1
    autocmd BufReadCmd *.nar call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.jar.original call zip#Browse(expand("<amatch>"))
    if filereadable(expand('$VIMRUNTIME/ftplugin/man.vim'))
        runtime ftplugin/man.vim
        autocmd filetype c,cpp,java setlocal keywordprg=:Man\ 3
    endif
endif

if version >= 703
    set colorcolumn=+1
endif
if version >= 800
    set scrolloff=0
endif

set tabstop=4
set shiftwidth=4
set expandtab
set number
